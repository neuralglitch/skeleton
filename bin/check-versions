#!/usr/bin/env php
<?php

// Color codes
const YC = "\033[1;33m"; // Yellow
const GC = "\033[0;32m"; // Green
const BC = "\033[1;34m"; // Blue
const NC = "\033[0m";    // No Color
const RC = "\033[0;31m"; // Red

/**
 * Execute a command and return its output
 *
 * @param string $command The command to execute
 * @return array An array with 'output' (array of lines), 'returnCode' (int), and 'success' (bool)
 */
function executeCommand(string $command): array
{
    $output = [];
    $returnCode = 0;
    exec($command, $output, $returnCode);
    
    return [
        'output' => $output,
        'returnCode' => $returnCode,
        'success' => $returnCode === 0
    ];
}

/**
 * Display a formatted version line
 *
 * @param string $name The name of the software
 * @param string $version The version string (empty if not found)
 */
function displayVersion(string $name, string $version): void
{
    $versionDisplay = !empty($version) ? YC . $version . NC : RC . "not installed" . NC;
    echo BC . "*" . NC . " " . GC . $name . NC . " version " . $versionDisplay . PHP_EOL;
}

/**
 * Get Apache version
 */
function getApacheVersion(): string
{
    $result = executeCommand('apache2 -v 2>&1');
    
    if (!$result['success']) {
        return '';
    }
    
    foreach ($result['output'] as $line) {
        if (preg_match('/Apache\/([0-9.]+)/', $line, $matches)) {
            return $matches[1];
        }
    }
    
    return '';
}

/**
 * Get Composer version
 */
function getComposerVersion(): string
{
    $result = executeCommand('composer --no-ansi --version 2>/dev/null');
    
    if (!$result['success'] || empty($result['output'])) {
        return '';
    }
    
    if (preg_match('/Composer version\s+([0-9.]+)/', $result['output'][0], $matches)) {
        return $matches[1];
    }
    
    return '';
}

/**
 * Get Symfony CLI version
 */
function getSymfonyVersion(): string
{
    $result = executeCommand('symfony --no-ansi version 2>/dev/null');
    
    if (!$result['success'] || empty($result['output'])) {
        return '';
    }
    
    $line = implode(' ', $result['output']);
    if (preg_match('/([0-9]+\.[0-9]+\.[0-9]+)/', $line, $matches)) {
        return $matches[1];
    }
    
    return '';
}

/**
 * Get MySQL Client version
 */
function getMySQLVersion(): string
{
    $result = executeCommand('mysql --version 2>/dev/null');
    
    if (!$result['success'] || empty($result['output'])) {
        return '';
    }
    
    $line = $result['output'][0];
    // MySQL version output contains multiple version numbers, we need the second one
    // Pattern matches version numbers with at least 2 parts (e.g., "15.2" or "8.0.30")
    if (preg_match_all('/([0-9]+(?:\.[0-9]+)+)/', $line, $matches)) {
        // Return the second version number found (the client version)
        return $matches[0][1] ?? ($matches[0][0] ?? '');
    }
    
    return '';
}

/**
 * Get PostgreSQL Client version
 */
function getPostgreSQLVersion(): string
{
    $result = executeCommand('psql --version 2>/dev/null');
    
    if (!$result['success'] || empty($result['output'])) {
        return '';
    }
    
    // Match: "psql (PostgreSQL) 14.5" or "psql (PostgreSQL) 14.5 (Ubuntu 14.5-0ubuntu0.22.04.1)"
    if (preg_match('/PostgreSQL\)\s+([0-9.]+)/', $result['output'][0], $matches)) {
        return $matches[1];
    }
    
    return '';
}

/**
 * Get OS name (matching bash script's uname -o behavior)
 */
function getOSName(): string
{
    $result = executeCommand('uname -o 2>/dev/null');
    
    if ($result['success'] && !empty($result['output'])) {
        return $result['output'][0];
    }
    
    // Fallback for systems where uname -o doesn't work (like macOS)
    return php_uname('s');
}

// Main execution
echo PHP_EOL;
echo BC . "Version Check" . NC . PHP_EOL;
echo BC . "~~~~~~~~~~~~~" . NC . PHP_EOL;
echo PHP_EOL;

// Collect all versions
$osName = getOSName();
$osVersion = php_uname('r');
$apacheVersion = getApacheVersion();
$mysqlVersion = getMySQLVersion();
$postgresqlVersion = getPostgreSQLVersion();
$phpVersion = PHP_VERSION;
$composerVersion = getComposerVersion();
$symfonyVersion = getSymfonyVersion();

// Display results
displayVersion($osName, $osVersion);
displayVersion('Apache Web Server', $apacheVersion);
displayVersion('MySQL Client', $mysqlVersion);
displayVersion('PostgreSQL Client', $postgresqlVersion);
displayVersion('PHP CLI', $phpVersion);
displayVersion('Composer', $composerVersion);
displayVersion('Symfony CLI', $symfonyVersion);

echo PHP_EOL;

